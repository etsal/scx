PLAN
====

We have two axes on which we need to work:

- MECHANISM: The main KASAN mechanism.
- ALLOCATOR: The consumer of the mechanism. It is co-designed with KASAN because
  it is the same consumer.
- TESTING: The tests are important because there are many, many edge cases that
  we need to cover, otherwise we may get false positives and false negatives.

We need analogues for all the code in mm/kasan:

- common.c: KASAN common API between the different backends
- generic.c: KASAN public API (most of the public functions are here)
- init.c: Bootstrapping code and fallback for large virtual memory mappings
- quarantine.c: Quarantining code for catching use-after-free
- report.c: Common reporting infrastructure, w/ parsing and printing
- report-generic.c: Code for filling in the reports printed out by
  report.c, including traversing the stack (since we are using the stack
  depot to store everything)
- shadow.c: Management of the shadow backing code, based on vmalloc

Functions to implement:
- common.c
	- kasan_save_stack
	- kasan_set_track
	- kasan_save_trace

	Allocator methods:

	- __kasan_kmalloc [Redzoning]

	We can ignore:

	- stack-related methods
	- slab-specific methods
	- mempool-specific methods

- generic.c


	[Allocation/Free metadata for tracking UAF/Double free
	and pinpointing which allocations bugged out]
	- kasan_init_object_meta - 
	- kasan_metadata_size
	- kasan_record_aux_stack

- report.c

[ We shouldn't need the code for dynamically creating shadow regions
here, since it is built into the arena.]


PLAN
====

We implement KASAN in passes, feature by feature. We want each
feature to be self-contained, i.e. not depend on later features.

For each feature we implement the basic KASAN mechanism, then we
integrate it with the allocator. We then write test cases that 
exercise the allocator. We define features in terms of KASAN's
public functions, exported or not, and implement the same or
equivalent functionatlity in AASAN.

Items tagged with [M] for mechanism, [A] for allocator features,
and [T] for testing. [C] is for compiler features, with only
two instances - one for heap memory and one for global objects.
We limit ourselves to heap memory for now We deal with global
objects last, if at all.

Some observations:

- We do not need to bootstrap the shadow region of memory. AASAN
  interprets shadow map value 0 as "valid", and arena memory is
  zeroed out when allocated. We initialize AASAN with non-arena
  BPF code, so we do not have the bootstrapping problem that the
  KASAN solves with the dummy shadow memory region mapping in init.c.
- We ignore stack-related ASAN functions, since we cannot stack
  allocate arena memory.
- We do not require more than one aux stack because it is only useful
  when chaining contexts together. Chaining BPF contexts together is 
  only possible with exceptions, when we are already tearing down
  the execution context. Tracking memory access violations is then
  not that useful.
- Some of the 


Basic functionality
-------------------

[A] Basic buddy allocator prototype

[M] Implementation of the ASAN intrinsics [generic.c]
[M] kasan_check_range
[M] kasan_byte_accessible
[M] kasan_poison
[M] kasan_poison_last_granule
[M] kasan_unpoison
[M] __asan_memset
[M] __asan_memmove
[M] __asan_memcpy
[M] __kasan_check_read
[M] __kasan_check_write

[M] __kasan_kmalloc_large
[M] __kasan_krealloc
[M] __kasan_kfree
[M] __kasan_kfree_large

[M] __kasan_unpoison_range
[M] __kasan_poison_pages

[A]                                 

[T] Basic passing tests
	- [TODO: Flesh out]


Shadow region management
------------------------

????

Alloc/Free Tracking
-------------------
[M] kasan_get_alloc_meta	
[M] kasan_get_free_meta
[M] kasan_save_alloc_info
[M] kasan_save_free_info

Reporting
---------

[M] kasan_enable_current  [Critical sections/Nesting]
[M] kasan_disable_current [Critical sections/Nesting]
[M] __asan_report_*() intrinsics
[M] kasan_report
[M] kasan_find_first_bad_addr
[M] kasan_get_alloc_size
[M] kasan_complete_mode_report_info
[M] kasan_metadata_fetch_row
[M] kasan_print_aux_stacks
[M] kasan_print_address_stack_frame
[M] kasan_non_canonical_hook

Redzoning
---------

Invalid Frees
-------------

[M] kasan_report_invalid_free

Quarantining
------------

[M] kasan_quarantine_put
[M] kasan_quarantine_reduce
[M] kasan_quarantine_remove_cache
[M] kasan_cache_shrink
[M] kasan_cache_shutdown


Global objects
--------------

[C] Compiler support/options to instrument in AddressSanitizer.cpp
[M] __asan_register_globals
[M] __asan_unregister_globals
